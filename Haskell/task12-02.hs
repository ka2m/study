import Data.Set hiding (map,filter)derivation :: Fractional a => (a -> a) -> (a -> a)derivation f =  \ x -> (- f (x + 2 * dx)          + 8 * f (x + dx)          - 8 * f (x - dx)          + f (x - 2 * dx)) / (12 * dx)  where dx = 0.1epsilon :: [Double]epsilon = iterate (/2) 1.0-- create point (0_+(x) for instance, O_-(x) is also ok, it doesn't really-- matter for us) neighbourhood. epsilon defines precision-- create O_+(x)hood :: Double -> [Double]hood x = map (newpoint x) epsilon  where newpoint x y = x + y-- apply newton transformation to each point of hoodtransNewtonStream :: (Double -> Double) -> Double -> [Double]transNewtonStream f x0 = map (transNewtonFrac f) (hood x0)  where transNewtonFrac f = \x -> x - f x / derivation f xextremum :: (Double -> Double) -> Double -> [[Char]]extremum f x0 =  filter (/= "0") (map (check f) (zipper f x0))  where    zipper f x0 = zip (transNewtonStream f x0) (hood x0)    check f zipped      -- eval proper newton results      | ( show (fst' zipped) ) == "-inf" =          if df (snd' zipped)  > 0          then "Local minmum at " ++ ( show (snd' zipped) )          else "Local maximum at " ++ ( show (snd' zipped) )      -- if no found, take the maximum precision (usually it works, see f2)      | (snd' zipped) == x0 =          if df (snd' zipped)  > 0          then "Local minmum at " ++ ( show (snd' zipped) )          else "Local maximum at " ++ ( show (snd' zipped) )      | otherwise = "0"        where  df = ( derivation  (derivation f) )               fst' (x, _) = x               snd' (_, x) = xremoveDups :: Ord a => [a] -> Set a -> [a]removeDups [] sofar = []removeDups (x : rest) sofar     | member x sofar = (removeDups rest sofar)     | otherwise      = x : ( removeDups rest (insert x sofar) )clearOutput :: Int -> (Double -> Double) -> Double -> [[Char]]clearOutput count f x0 = removeDups (take count $ extremum f x0) emptyf1 x = x^2 - x + 4.0f2 x = - x^2 - x + 4.0main = do  print $ take 60 $ extremum f1 0.5  print $ take 60 $ extremum f2 1.5  -- fancy output  print $ clearOutput 60 f1 0.5  print $ clearOutput 60 f2 1.5