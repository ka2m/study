#pragma once

namespace task6 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for Form1
	///
	/// WARNING: If you change the name of this class, you will need to change the
	///          'Resource File Name' property for the managed resource compiler tool
	///          associated with all .resx files this class depends on.  Otherwise,
	///          the designers will not be able to interact properly with localized
	///          resources associated with this form.
	/// </summary>
	public ref class Form1 : public System::Windows::Forms::Form
	{
	public:
		Form1(void)
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~Form1()
		{
			if (components)
			{
				delete components;
			}
		}

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;
	private: System::Windows::Forms::OpenFileDialog^  openFileDialog;
	private: System::Windows::Forms::Button^  btnOpen;
			 System::Collections::Generic::List<line> lines;
			 float top, bottom, left, right;
			 float Wcx, Wcy, Wx, Wy;
			 float Vcx, Vcy, Vx, Vy;


			 bool drawLineNames;

#pragma region Windows Form Designer generated code
			 /// <summary>
			 /// Required method for Designer support - do not modify
			 /// the contents of this method with the code editor.
			 /// </summary>
			 void InitializeComponent(void)
			 {
				 this->openFileDialog = (gcnew System::Windows::Forms::OpenFileDialog());
				 this->btnOpen = (gcnew System::Windows::Forms::Button());
				 this->SuspendLayout();
				 // 
				 // openFileDialog
				 // 
				 this->openFileDialog->DefaultExt = L"txt";
				 this->openFileDialog->Filter = L"Text Files (*.txt)|*.txt|All files(*.*)|*.*";
				 this->openFileDialog->Title = L"Open File";
				 // 
				 // btnOpen
				 // 
				 this->btnOpen->Anchor = static_cast<System::Windows::Forms::AnchorStyles>((System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Right));
				 this->btnOpen->Location = System::Drawing::Point(711, 6);
				 this->btnOpen->Name = L"btnOpen";
				 this->btnOpen->Size = System::Drawing::Size(75, 23);
				 this->btnOpen->TabIndex = 0;
				 this->btnOpen->Text = L"Open";
				 this->btnOpen->UseVisualStyleBackColor = true;
				 this->btnOpen->Click += gcnew System::EventHandler(this, &Form1::btnOpen_Click);
				 // 
				 // Form1
				 // 
				 this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
				 this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
				 this->ClientSize = System::Drawing::Size(800, 400);
				 this->Controls->Add(this->btnOpen);
				 this->DoubleBuffered = true;
				 this->KeyPreview = true;
				 this->MinimumSize = System::Drawing::Size(150, 50);
				 this->Name = L"Form1";
				 this->Text = L"Form1";
				 this->Load += gcnew System::EventHandler(this, &Form1::Form1_Load);
				 this->Paint += gcnew System::Windows::Forms::PaintEventHandler(this, &Form1::Form1_Paint);
				 this->Resize += gcnew System::EventHandler(this, &Form1::Form1_Resize);
				 this->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &Form1::Form1_KeyDown);
				 this->ResumeLayout(false);

			 }
#pragma endregion
	private: void drawFigure(Graphics^ g, Pen^ pen) {
				 /* Generated by
				 with open('file2', 'r') as f:
						minusX = -3
						minusY = -1
						cell = 20
						shiftx = -30
						shifty = -20
						scale = 12
						fsx = -27.5
						fsy = -12
						for l in f.readlines():
							x = ((float(l.split(' ')[0]) + minusX) * cell + shiftx) / scale + fsx
							y = ((float(l.split(' ')[1]) + minusY) * cell + shifty) / scale + fsy
							xto = ((float(l.split(' ')[2]) + minusX) * cell + shiftx) / scale + fsx
							yto = ((float(l.split(' ')[3]) + minusY) * cell + shifty) / scale + fsy
							v = (x, y, xto, yto)
							print '{%.1f, %.1f, %.1f, %.1f},' % v

							if (x < -30.0) or (x > 30.0):
								print 'x is ', x
							if (y < -20.0) or (y > 20.0):
								print 'y is', y
							if (xto < -30.0) or (xto > 30.0):
								print 'x is ', xto
							if (yto < -20.0) or (yto > 20.0):
								print 'y is', yto
			    */
				float kotik[114][4] = {{-30.0, -12.0, -23.3, -12.0},
				 {-25.0, -13.7, -23.3, -12.0},
				 {-25.0, -13.7, -20.0, -13.7},
				 {-20.0, -13.7, -16.7, -12.0},
				 {-16.7, -12.0, -15.0, -10.3},
				 {-16.7, -8.7, -15.0, -10.3},
				 {-16.7, -8.7, -16.7, -7.0},
				 {-16.7, -7.0, -20.0, -7.0},
				 {-20.0, -7.0, -23.3, -8.7},
				 {-25.0, -8.7, -23.3, -8.7},
				 {-28.3, -10.3, -25.0, -8.7},
				 {-30.0, -12.0, -28.3, -10.3},
				 {-16.7, -7.0, -13.3, -3.7},
				 {-13.3, -3.7, -10.0, -5.3},
				 {-15.0, -10.3, -11.7, -10.3},
				 {-11.7, -10.3, -11.7, -8.7},
				 {-11.7, -8.7, -8.3, -8.7},
				 {-11.7, -8.7, -10.0, -5.3},
				 {-10.0, -5.3, -8.3, -7.0},
				 {-11.7, -10.3, -8.3, -12.0},
				 {-8.3, -12.0, 5.0, -12.0},
				 {5.0, -12.0, 10.0, -10.3},
				 {10.0, -10.3, 18.3, -10.3},
				 {18.3, -10.3, 21.7, -8.7},
				 {21.7, -8.7, 26.7, -8.7},
				 {26.7, -8.7, 26.7, -5.3},
				 {26.7, -5.3, 25.0, -3.7},
				 {25.0, -3.7, 23.3, -3.7},
				 {23.3, -3.7, 25.0, -5.3},
				 {23.3, -3.7, 20.0, -5.3},
				 {20.0, -5.3, -10.0, -5.3},
				 {-20.0, -7.0, -25.0, -7.0},
				 {-25.0, -7.0, -28.3, -8.7},
				 {-28.3, -8.7, -30.0, -7.0},
				 {-30.0, -7.0, -30.0, -5.3},
				 {-30.0, -5.3, -21.7, 3.0},
				 {-21.7, 1.3, -21.7, -0.3},
				 {-21.7, -0.3, -20.0, -2.0},
				 {-20.0, -2.0, -16.7, -3.7},
				 {-16.7, -3.7, -15.0, -5.3},
				 {-21.7, 3.0, -20.0, 3.0},
				 {-20.0, 3.0, -16.7, -0.3},
				 {-16.7, -0.3, -15.0, -3.7},
				 {-15.0, -3.7, -15.0, -5.3},
				 {-18.3, 1.3, -18.3, 3.0},
				 {-18.3, 3.0, -16.7, 4.7},
				 {-16.7, 4.7, -15.0, 3.0},
				 {-15.0, 3.0, -13.3, -0.3},
				 {-13.3, -0.3, -13.3, -3.7},
				 {-13.3, 4.7, -13.3, 1.3},
				 {-13.3, 1.3, -11.7, -2.0},
				 {-11.7, 6.3, -11.7, 3.0},
				 {-11.7, 3.0, -8.3, -0.3},
				 {-10.0, 1.3, -10.0, 4.7},
				 {-10.0, 4.7, -8.3, 6.3},
				 {-8.3, 6.3, -5.0, 3.0},
				 {-8.3, 3.0, -6.7, -0.3},
				 {-6.7, 3.0, -5.0, 1.3},
				 {-8.3, 6.3, -6.7, 6.3},
				 {-6.7, 6.3, -3.3, 4.7},
				 {-3.3, 4.7, 0.0, 6.3},
				 {0.0, 6.3, 3.3, 6.3},
				 {3.3, 6.3, 1.7, 8.0},
				 {3.3, 8.0, 5.0, 6.3},
				 {5.0, 6.3, 5.0, 8.0},
				 {6.7, 6.3, 6.7, 8.0},
				 {6.7, 6.3, 10.0, 6.3},
				 {10.0, 6.3, 13.3, 4.7},
				 {13.3, 4.7, 15.0, 4.7},
				 {15.0, 4.7, 18.3, 8.0},
				 {18.3, 8.0, 16.7, 4.7},
				 {18.3, 8.0, 20.0, 6.3},
				 {20.0, 6.3, 20.0, -0.3},
				 {20.0, -0.3, 16.7, 3.0},
				 {16.7, 3.0, 16.7, 4.7},
				 {20.0, 1.3, 23.3, 3.0},
				 {23.3, 3.0, 25.0, 6.3},
				 {21.7, -0.3, 23.3, 1.3},
				 {23.3, 1.3, 25.0, 4.7},
				 {23.3, -0.3, 26.7, 3.0},
				 {25.0, -0.3, 28.3, 1.3},
				 {26.7, -0.3, 30.0, -2.0},
				 {26.7, -2.0, 28.3, -5.3},
				 {26.7, -2.0, 28.3, -2.0},
				 {28.3, -2.0, 30.0, -3.7},
				 {1.7, 9.7, 1.7, 11.3},
				 {1.7, 11.3, 3.3, 13.0},
				 {5.0, 13.0, 6.7, 9.7},
				 {-5.0, -0.3, -1.7, -0.3},
				 {-3.3, -0.3, -3.3, -2.0},
				 {-3.3, -2.0, -1.7, -3.7},
				 {-1.7, -3.7, 1.7, -4.5},
				 {1.7, -4.5, 3.3, -3.7},
				 {3.3, -3.7, 5.0, -2.0},
				 {5.0, -2.0, 5.0, -0.3},
				 {3.3, -0.3, 3.3, 1.3},
				 {3.3, 1.3, 6.7, 1.3},
				 {3.3, -0.3, 6.7, -0.3},
				 {6.7, -0.3, 6.7, 1.3},
				 {5.0, -2.0, 6.7, -3.7},
				 {6.7, -3.7, 8.3, -3.7},
				 {8.3, -3.7, 11.7, -2.0},
				 {11.7, -2.0, 13.3, -0.3},
				 {11.7, -0.3, 15.0, -0.3},
				 {2.5, 4.7, 3.3, 5.5},
				 {5.0, 5.5, 6.7, 4.7},
				 {3.3, 3.0, 4.2, 3.8},
				 {4.2, 3.8, 5.0, 3.0},
				 {5.0, 3.0, 5.8, 3.8},
				 {5.8, 3.8, 6.7, 3.0},
				 {6.7, 3.0, 5.8, 2.2},
				 {5.8, 2.2, 5.0, 3.0},
				 {5.0, 3.0, 4.2, 2.2},
				 {4.2, 2.2, 3.3, 3.0}
				 };

	   			g->DrawRectangle(pen, -30,-20,60,40);

				 for(int i=0; i < 114; ++i) {
					 g->DrawLine(pen, kotik[i][0], kotik[i][1], kotik[i][2], kotik[i][3]);
					 if (drawLineNames) {
						 System::Drawing::Font^ drawFont = gcnew System::Drawing::Font("Arial", 1);
						 SolidBrush^ drawBrush = gcnew SolidBrush(Color::Black);
						 g -> DrawString(Convert::ToString(i), drawFont, drawBrush, kotik[i][0] + (kotik[i][2] - kotik[i][0]) / 2, kotik[i][1] + (kotik[i][3] - kotik[i][1]) / 2 - 8);
					 }
				 }
			 }


	private: System::Void Form1_Paint(System::Object^  sender, System::Windows::Forms::PaintEventArgs^  e) {
				 Graphics^ g = e->Graphics;
				 Pen^ pen = gcnew Pen(Color::Black);
				 g->Clear(Color::White);
				 pen->Width = 0.5;

				 System::Drawing::Font^ drawFont = gcnew System::Drawing::Font("Arial", 5);
				 SolidBrush^ drawBrush = gcnew SolidBrush(Color::Black);

				 Pen^ rectPen = gcnew Pen(Color::Aqua);
				 rectPen->Width = 3;
				 Rectangle rect = System::Drawing::Rectangle(Wcx, top, Wx, Wy);
				 g->DrawRectangle(rectPen, rect);
				 g->Clip = gcnew System::Drawing::Region(rect);

		
				 g->Transform = gcnew System::Drawing::Drawing2D::Matrix(
					 T[0][0], T[1][0],
					 T[0][1], T[1][1],
					 T[0][2], T[1][2]);

				 for (int i = 0; i < matrices.size(); i++) {
					 mat C;
					 times(T, matrices[i], C);
					 g->Transform = gcnew System::Drawing::Drawing2D::Matrix(
						 C[0][0], C[1][0],
						 C[0][1], C[1][1],
						 C[0][2], C[1][2]);

					 drawFigure(g, pen);
				 }
			 }
	private: System::Void Form1_Load(System::Object^  sender, System::EventArgs^  e) {

				 matrices.clear();

				 unit(T);
				 T[1][1] = -1;
				 T[1][M - 1] = Form::ClientRectangle.Height;

				 left = 10;
				 top = 5;
				 bottom = 20;
				 right = 100;


				 Wcx = left;
				 Wcy = Form::ClientRectangle.Height - bottom;
				 Wx = Form::ClientRectangle.Width - left - right;
				 Wy = Form::ClientRectangle.Height - top - bottom;
			 }
	private: System::Void btnOpen_Click(System::Object^  sender, System::EventArgs^  e) {
				 if (this->openFileDialog->ShowDialog() == System::Windows::Forms::DialogResult::OK) {
					 wchar_t fileName[1024];
					 for (int i = 0; i < openFileDialog->FileName->Length; i++) {
						 fileName[i] = openFileDialog->FileName[i];
					 }

					 fileName[openFileDialog->FileName->Length] = '\0';
					 std::ifstream in;
					 in.open(fileName);

					 if (in.is_open()) {
						 matrices.clear();
						 std::stack<mat> matStack;
						 mat K; 
						 unit(K);
						 unit(T);

						 std::string str;
						 getline(in, str);

						 while (in) {
							 if ((str.find_first_not_of(" \t\r\n") != std::string::npos) && (str[0] != '#')) {
								 std::stringstream s(str);
								 std::string cmd;
								 s >> cmd;

								 if (cmd == "frame") {
									 int a, b, c, d;
									 s >> a >> b >> c >> d;

									 Vcx = a;
									 Vcy = b;
									 Vx = c;
									 Vy = d;

									 frame(Vx, Vy, Vcx, Vcy, Wx, Wy, Wcx, Wcy, T);
								 } else if (cmd == "figure") {
									 matrices.push_back(K);
								 } else if (cmd == "pushTransform") {
									 matStack.push(K);
								 } else if (cmd == "popTransform") {
									 K = matStack.top();
									 matStack.pop();
								 } else if (cmd == "translate") {
									 float x, y;
									 s >> x >> y;
									 mat C, C1;
									 move(x, y, C);
									 times(K, C, C1);
									 K = C1;
								 } else if (cmd == "scale") {
									 float x, y;
									 s >> x >> y;
									 mat C, C1;
									 scale(x, y, C);
									 times(K, C, C1);
									 K = C1;
								 } else if (cmd == "rotate") {
									 float Phi;
									 s >> Phi;
									 float pi = 3.1415926535;
									 float PhiR = Phi * (pi / 180);
									 mat C, C1;
									 rotate(PhiR, 0, 0, C);
									 //rotate(PhiR, 19.5, 8.5, C);
									 times(K, C, C1);
									 K = C1;
								 }
							 }

							 getline(in, str);
						 }
					 }

					 this->Refresh();
				 }
			 }
	private: System::Void Form1_KeyDown(System::Object^  sender, System::Windows::Forms::KeyEventArgs^  e) {
				 Rectangle rect = Form::ClientRectangle;
				 mat R, T1;
				 unit(R);
				 float kscale = 1 / 1.1;
				 float centerX = rect.Width / 2;
				 float centerY = rect.Height / 2;
				 const int CELL_SIZE = 10;
				 switch(e->KeyCode) {
					case Keys::W: move(0, -1, R); break;
					case Keys::S: move(0, 1, R); break;
					case Keys::A: move(-1, 0, R); break;
					case Keys::D: move(1, 0, R);break;

					case Keys::E: rotate(0.05, 0, 0, R); break;
					case Keys::X: scale(1.1, 1.1, R); break;

					case Keys::Q: rotate(-0.05, 0, 0, R); break;
					case Keys::Z: scale(kscale, kscale, R); break;


					case Keys::T: move(0, -CELL_SIZE, R); break;
					case Keys::G: move(0, CELL_SIZE, R); break;
					case Keys::F: move(-CELL_SIZE, 0, R); break;
					case Keys::H: move(CELL_SIZE, 0, R); break;


					case Keys::U:
						reflectVertical(R);
						times(R, T, T1);
						set(T1, T);
						move(rect.Width, 0, R);
						break;

					case Keys::J:
						reflectHorizontal(R);
						times(R, T, T1);
						set(T1, T);
						move(0, rect.Height, R);
						break;


					case Keys::R: rotate(-0.05, rect.Width / 2, rect.Height / 2, R); break;
					case Keys::Y: rotate(0.05, rect.Width / 2, rect.Height / 2, R); break;


					case Keys::C:
						move(-centerX, -centerY, R);
						times(R, T, T1);

						scale(kscale, kscale, R);
						times(R, T1, T);

						move(centerX, centerY, R);
						break;

					case Keys::V:
						move(-centerX, -centerY, R);
						times(R, T, T1);

						scale(1.1, 1.1, R);
						times(R, T1, T);


						move(centerX, centerY, R);
						break;

					case Keys::I:
						move(0, -centerY, R);
						times(R, T, T1);
						set(T1, T);

						scale(1, kscale, R);
						times(R, T1, T);


						move(0, centerY, R);
						break;

					case Keys::O:
						move(0, -centerY, R);
						times(R, T, T1);
						set(T1, T);

						scale(1, 1.1, R);
						times(R, T1, T);


						move(0, centerY, R);
						break;

					case Keys::K:
						move(-centerX, 0, R);
						times(R, T, T1);
						set(T1, T);

						scale(kscale, 1, R);
						times(R, T1, T);


						move(centerX, 0, R);
						break;

					case Keys::L:
						move(-centerX, 0, R);
						times(R, T, T1);
						set(T1, T);

						scale(1.1, 1, R);
						times(R, T1, T);


						move(centerX, 0, R);
						break;

					case Keys::Escape:
						frame(Vx, Vy, Vcx, Vcy, Wx, Wy, Wcx, Wcy, T);
						drawLineNames = false;
						break;
					case Keys::P:
						unit(R);
						drawLineNames = !drawLineNames;
						break;
					default: unit(R);

				 }

				 times(R, T, T1);
				 set(T1, T);
				 this->Refresh();
			 }
	private: System::Void Form1_Resize(System::Object^  sender, System::EventArgs^  e) {
				 float oldWx = Wx, oldWy = Wy;

				 Wcx = left;
				 Wcy = Form::ClientRectangle.Height - bottom;
				 Wx = Form::ClientRectangle.Width - left - right;
				 Wy = Form::ClientRectangle.Height - top - bottom;

				 mat R;
				 move(-Wcx, -top, R);
				 times(R, T, T);

				 scale(Wx / oldWx, Wy / oldWy, R);
				 times(R, T, T);

				 move(Wcx, top, R);
				 times(R, T, T);

				 this->Refresh();
			 }
	};
}

